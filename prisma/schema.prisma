// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  reports  Report[]
  posts    Post[]
  contacts Contact[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  nameAr      String?  // Arabic name
  nameFr      String?  // French name
  description String?
  icon        String?  // Icon name or URL
  color       String?  // Hex color code
  createdAt   DateTime @default(now())

  contacts Contact[]
}

model Location {
  id       String   @id @default(cuid())
  name     String   @unique
  nameAr   String?  // Arabic name
  nameFr   String?  // French name
  region   String?  // Region/State
  country  String   @default("Morocco")
  lat      Float?   // Latitude
  lng      Float?   // Longitude
  createdAt DateTime @default(now())

  contacts Contact[]
}

model Contact {
  id          String      @id @default(cuid())
  name        String
  nameAr      String?     // Arabic name
  nameFr      String?     // French name
  role        ContactRole
  categoryId  String
  locationId  String
  organization String?
  phone       String?
  email       String?
  website     String?
  address     String?
  languages   String[]    // Array of language codes: ["ar", "fr", "en"]
  description String?
  notes       String?     // Special notes like "Free legal aid for protesters"
  isVerified  Boolean     @default(false)
  isAvailable Boolean     @default(true)
  availableHours String?   // JSON string with availability schedule
  emergency   Boolean     @default(false)
  socialMedia Json?       // JSON object with social media links
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String      // User ID who created this contact
  updatedBy   String?     // User ID who last updated

  category Category @relation(fields: [categoryId], references: [id])
  location Location @relation(fields: [locationId], references: [id])
  creator  User     @relation(fields: [createdBy], references: [id])
  updater  User?    @relation(fields: [updatedBy], references: [id])
  media    Media[]
  reports  Report[]
}

model Media {
  id        String   @id @default(cuid())
  contactId String?
  reportId  String?
  url       String
  type      MediaType
  filename  String
  size      Int      // File size in bytes
  mimeType  String
  uploadedAt DateTime @default(now())

  contact Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  report  Report?  @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Report {
  id          String     @id @default(cuid())
  title       String
  description String
  location    String?
  isAnonymous Boolean    @default(false)
  status      ReportStatus @default(PENDING)
  priority    Priority   @default(MEDIUM)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   String?    // User ID (null if anonymous)
  assignedTo  String?    // Admin/Moderator ID
  tags        String[]   // Array of tags for categorization

  creator   User?    @relation(fields: [createdBy], references: [id])
  assignee  User?    @relation(fields: [assignedTo], references: [id])
  contact   Contact? @relation(fields: [id], references: [id])
  media     Media[]
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String
  isPinned  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String
  category  String?  // Forum category/topic

  creator User @relation(fields: [createdBy], references: [id])
}

// Enums
enum UserRole {
  USER
  NGO
  LAWYER
  DOCTOR
  JOURNALIST
  MODERATOR
  ADMIN
}

enum ContactRole {
  NGO
  LAWYER
  DOCTOR
  JOURNALIST
  INSTITUTION
  MEDICAL_CENTER
  HOTLINE
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  VERIFIED
  RESOLVED
  DISMISSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
